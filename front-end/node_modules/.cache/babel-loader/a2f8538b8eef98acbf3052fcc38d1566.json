{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/marilzon/code/RocketSeat/GoBarber/front-end/src/hooks/Toast.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToastContainer from '../components/ToastContainer';\nconst ToastContext = /*#__PURE__*/createContext({});\n\nconst ToastProvider = ({\n  children\n}) => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const addToast = useCallback(({\n    type,\n    title,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n    setMessages(state => [...state, toast]);\n  }, []);\n  const removeToast = useCallback(id => {\n    setMessages(state => state.filter(message => message.id !== id));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ToastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ToastProvider, \"B21RFwG32JC+fV89pZ9By69CAIM=\");\n\n_c = ToastProvider;\n\nfunction useToast() {\n  _s2();\n\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be user within a ToastProvider');\n  }\n\n  return context;\n}\n\n_s2(useToast, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { ToastProvider, useToast };\n\nvar _c;\n\n$RefreshReg$(_c, \"ToastProvider\");","map":{"version":3,"sources":["/home/marilzon/code/RocketSeat/GoBarber/front-end/src/hooks/Toast.tsx"],"names":["React","createContext","useCallback","useContext","useState","uuid","ToastContainer","ToastContext","ToastProvider","children","messages","setMessages","addToast","type","title","description","id","toast","state","removeToast","filter","message","useToast","context","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AAcA,MAAMC,YAAY,gBAAGN,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,MAAMO,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAChD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAiB,EAAjB,CAAxC;AAEA,QAAMQ,QAAQ,GAAGV,WAAW,CAC1B,CAAC;AAAEW,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,KAA4D;AAC1D,UAAMC,EAAE,GAAGX,IAAI,EAAf;AAEA,UAAMY,KAAK,GAAG;AACZD,MAAAA,EADY;AAEZH,MAAAA,IAFY;AAGZC,MAAAA,KAHY;AAIZC,MAAAA;AAJY,KAAd;AAOAJ,IAAAA,WAAW,CAACO,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWD,KAAX,CAAV,CAAX;AACD,GAZyB,EAa1B,EAb0B,CAA5B;AAgBA,QAAME,WAAW,GAAGjB,WAAW,CAAEc,EAAD,IAAgB;AAC9CL,IAAAA,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACE,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACL,EAAR,KAAeA,EAAvC,CAAV,CAAX;AACD,GAF8B,EAE5B,EAF4B,CAA/B;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLJ,MAAAA,QADK;AAELO,MAAAA;AAFK,KADT;AAAA,4BAME,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAET;AAA1B;AAAA;AAAA;AAAA;AAAA,YANF,EAOGD,QAPH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAlCD;;GAAMD,a;;KAAAA,a;;AAoCN,SAASc,QAAT,GAAsC;AAAA;;AACpC,QAAMC,OAAO,GAAGpB,UAAU,CAACI,YAAD,CAA1B;;AAEA,MAAI,CAACgB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;IARQD,Q;;AAUT,SAASd,aAAT,EAAwBc,QAAxB","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { uuid } from 'uuidv4';\n\nimport ToastContainer from '../components/ToastContainer';\n\ninterface ToastContextData {\n  addToast(message: Omit<ToastMessage, 'id'>): void;\n  removeToast(id: string): void;\n}\n\nexport interface ToastMessage {\n  id: string;\n  type?: 'success' | 'error' | 'info';\n  title: string;\n  description?: string;\n}\n\nconst ToastContext = createContext<ToastContextData>({} as ToastContextData);\n\nconst ToastProvider: React.FC = ({ children }) => {\n  const [messages, setMessages] = useState<ToastMessage[]>([]);\n\n  const addToast = useCallback(\n    ({ type, title, description }: Omit<ToastMessage, 'id'>) => {\n      const id = uuid();\n\n      const toast = {\n        id,\n        type,\n        title,\n        description,\n      };\n\n      setMessages(state => [...state, toast]);\n    },\n    [],\n  );\n\n  const removeToast = useCallback((id: string) => {\n    setMessages(state => state.filter(message => message.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider\n      value={{\n        addToast,\n        removeToast,\n      }}\n    >\n      <ToastContainer messages={messages} />\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nfunction useToast(): ToastContextData {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('useToast must be user within a ToastProvider');\n  }\n\n  return context;\n}\n\nexport { ToastProvider, useToast };\n"]},"metadata":{},"sourceType":"module"}