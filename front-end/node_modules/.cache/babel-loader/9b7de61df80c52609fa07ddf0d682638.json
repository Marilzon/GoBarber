{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/marilzon/code/RocketSeat/GoBarber/front-end/src/hooks/Auth.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport api from '../services/api';\nconst AuthContext = /*#__PURE__*/createContext({});\n\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [data, setData] = useState(() => {\n    const token = localStorage.getItem('@Gobarber:token');\n    const user = localStorage.getItem('@Gobarber:user');\n\n    if (token && user) {\n      return {\n        token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const signIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    localStorage.setItem('@Gobarber:token', token);\n    localStorage.setItem('@Gobarber:user', JSON.stringify(user));\n    setData({\n      token,\n      user\n    });\n  }, []);\n  const signOut = useCallback(() => {\n    localStorage.removeItem('@GoBarber:token');\n    localStorage.removeItem('@GoBarber:user');\n    setData({});\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      signIn,\n      signOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"rHnQ2pyO88Rv7yo1I5A98Xc2l2Y=\");\n\n_c = AuthProvider;\n\nfunction useAuth() {\n  _s2();\n\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within a AuthProvider');\n  }\n\n  return context;\n}\n\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { AuthProvider, useAuth };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/marilzon/code/RocketSeat/GoBarber/front-end/src/hooks/Auth.tsx"],"names":["React","createContext","useCallback","useContext","useState","api","AuthContext","AuthProvider","children","data","setData","token","localStorage","getItem","user","JSON","parse","signIn","email","password","response","post","setItem","stringify","signOut","removeItem","useAuth","context","Error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAkBA,MAAMC,WAAW,gBAAGL,aAAa,CAAkB,EAAlB,CAAjC;;AAEA,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD,UAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,UAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAb;;AAEA,QAAIF,KAAK,IAAIG,IAAb,EAAmB;AACjB,aAAO;AAAEH,QAAAA,KAAF;AAASG,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWF,IAAX;AAAf,OAAP;AACD;;AAED,WAAO,EAAP;AACD,GAT+B,CAAhC;AAWA,QAAMG,MAAM,GAAGf,WAAW,CAAC,OAAO;AAAEgB,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP,KAA+B;AACxD,UAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAJ,CAAS,UAAT,EAAqB;AAC1CH,MAAAA,KAD0C;AAE1CC,MAAAA;AAF0C,KAArB,CAAvB;AAKA,UAAM;AAAER,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAAkBM,QAAQ,CAACX,IAAjC;AAEAG,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAwCX,KAAxC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,gBAArB,EAAuCP,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAvC;AAEAJ,IAAAA,OAAO,CAAC;AAAEC,MAAAA,KAAF;AAASG,MAAAA;AAAT,KAAD,CAAP;AACD,GAZyB,EAYvB,EAZuB,CAA1B;AAcA,QAAMU,OAAO,GAAGtB,WAAW,CAAC,MAAM;AAChCU,IAAAA,YAAY,CAACa,UAAb,CAAwB,iBAAxB;AACAb,IAAAA,YAAY,CAACa,UAAb,CAAwB,gBAAxB;AAEAf,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GAL0B,EAKxB,EALwB,CAA3B;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAb;AAAmBG,MAAAA,MAAnB;AAA2BO,MAAAA;AAA3B,KAA7B;AAAA,cACGhB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtCD;;GAAMD,Y;;KAAAA,Y;;AAwCN,SAASmB,OAAT,GAAoC;AAAA;;AAClC,QAAMC,OAAO,GAAGxB,UAAU,CAACG,WAAD,CAA1B;;AAEA,MAAI,CAACqB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD;;IARQD,O;;AAUT,SAASnB,YAAT,EAAuBmB,OAAvB","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport api from '../services/api';\n\ninterface SignInCredentials {\n  email: string;\n  password: string;\n}\n\ninterface AuthContextData {\n  user: string;\n  signIn(credentials: SignInCredentials): Promise<void>;\n  signOut(): void;\n}\n\ninterface AuthState {\n  token: string;\n  user: string;\n}\n\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nconst AuthProvider: React.FC = ({ children }) => {\n  const [data, setData] = useState<AuthState>(() => {\n    const token = localStorage.getItem('@Gobarber:token');\n    const user = localStorage.getItem('@Gobarber:user');\n\n    if (token && user) {\n      return { token, user: JSON.parse(user) };\n    }\n\n    return {} as AuthState;\n  });\n\n  const signIn = useCallback(async ({ email, password }) => {\n    const response = await api.post('sessions', {\n      email,\n      password,\n    });\n\n    const { token, user } = response.data;\n\n    localStorage.setItem('@Gobarber:token', token);\n    localStorage.setItem('@Gobarber:user', JSON.stringify(user));\n\n    setData({ token, user });\n  }, []);\n\n  const signOut = useCallback(() => {\n    localStorage.removeItem('@GoBarber:token');\n    localStorage.removeItem('@GoBarber:user');\n\n    setData({} as AuthState);\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user: data.user, signIn, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nfunction useAuth(): AuthContextData {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within a AuthProvider');\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };\n"]},"metadata":{},"sourceType":"module"}